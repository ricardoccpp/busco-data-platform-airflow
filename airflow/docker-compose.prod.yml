version: '3.8'

x-airflow-common: &airflow-common
  image: ${ECR_REPOSITORY_URI:-data-platform-prod-airflow:latest}
  env_file:
    - .env
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__CORE__PARALLELISM: 64
    AIRFLOW__CORE__MAX_ACTIVE_TAKS_PER_DAG: 32
    AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: 16
    AIRFLOW__WEBSERVER__WARN_DEPLOYMENT_EXPOSURE: 'false'
    AIRFLOW__LOGGING__REMOTE_LOGGING: 'true'
    AIRFLOW__LOGGING__DELETE_LOCAL_LOGS: 'true'
    AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AWS_CONN_ID:-aws_default}
    AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AWS_S3_LOGS_PATH}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
    AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
    # Configurar a URL base para o seu subdomínio
    AIRFLOW__WEBSERVER__BASE_URL: 'https://data-platform-airflow.busco.digital'
    # Configuração opcional para segurança
    AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: 'True'
  # Nota: Em produção, somente a pasta logs é mapeada, as outras são copiadas na imagem
  volumes:
    - ./logs:/opt/airflow/logs
  user: "root"
  restart: always
  logging:
    driver: "json-file"
    options:
      max-size: "100m"
      max-file: "3"
  depends_on:
    redis:
      condition: service_healthy

services:
  # Proxy Nginx com suporte automático a HTTPS
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    container_name: nginx-proxy  # Nome explícito do contêiner
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/certs:/etc/nginx/certs
      - ./nginx/vhost.d:/etc/nginx/vhost.d
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/conf.d:/etc/nginx/conf.d
    restart: always
    
  # Companheiro Let's Encrypt para obtenção/renovação de certificados
  # letsencrypt:
  #   image: jrcs/letsencrypt-nginx-proxy-companion
  #   container_name: letsencrypt
  #   environment:
  #     NGINX_PROXY_CONTAINER: nginx-proxy  # Nome do contêiner nginx-proxy
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./nginx/certs:/etc/nginx/certs
  #     - ./nginx/vhost.d:/etc/nginx/vhost.d
  #     - ./nginx/html:/usr/share/nginx/html
  #   restart: always
  #   depends_on:
  #     - nginx-proxy
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    volumes:
      - redis-data:/data
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    environment:
      <<: *airflow-common-env
      # Variáveis para o sistema de proxy/Let's Encrypt
      VIRTUAL_HOST: data-platform-airflow.busco.digital
      VIRTUAL_PORT: 8080
      # LETSENCRYPT_HOST: data-platform-airflow.busco.digital
      # LETSENCRYPT_EMAIL: ricardo.tanaka-partner@backlgrs.com.br
    # ports:
    #   - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    restart: always
    depends_on:
      redis:
        condition: service_healthy

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Verificar se o banco já está inicializado
        echo "Verificando estado do banco de dados..."
        if airflow db check > /dev/null 2>&1; then
          echo "Banco de dados já inicializado, executando upgrade..."
          airflow db migrate
        else
          echo "Inicializando banco de dados..."
          airflow db init
        fi
        
        # Criar usuário admin se necessário
        if [[ -n "${_AIRFLOW_WWW_USER_USERNAME}" && -n "${_AIRFLOW_WWW_USER_PASSWORD}" ]]; then
          echo "Verificando usuário admin..."
          if ! airflow users list | grep -q "${_AIRFLOW_WWW_USER_USERNAME}"; then
            echo "Criando usuário admin: ${_AIRFLOW_WWW_USER_USERNAME}"
            airflow users create \
              --username "${_AIRFLOW_WWW_USER_USERNAME}" \
              --password "${_AIRFLOW_WWW_USER_PASSWORD}" \
              --firstname Admin \
              --lastname User \
              --role Admin \
              --email admin@example.com
          else
            echo "Usuário admin já existe."
          fi
        fi

        # Criar conexões iniciais
        echo "Criando conexões iniciais"
        python scripts/setup_connections.py

        echo "Inicialização concluída!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    restart: "no"

volumes:
  redis-data: